
timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000027a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000002ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000320  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009f9  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000931  00000000  00000000  00000d89  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000337  00000000  00000000  000016ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  000019f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004df  00000000  00000000  00001a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000103  00000000  00000000  00001f37  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000203a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__vector_14>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a4 30       	cpi	r26, 0x04	; 4
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 a1 00 	call	0x142	; 0x142 <main>
  d4:	0c 94 3b 01 	jmp	0x276	; 0x276 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <setupTimer0>:
#define blink_delta 1000

volatile uint32_t main_timer = 0;  // Time counter

void setupTimer0() {
	TCCR0B = 0b00000011; // Set prescaler to 64
  dc:	83 e0       	ldi	r24, 0x03	; 3
  de:	85 bd       	out	0x25, r24	; 37
	TCCR0A = (1<<WGM01); //Set TCCR0A to CTC mode
  e0:	82 e0       	ldi	r24, 0x02	; 2
  e2:	84 bd       	out	0x24, r24	; 36
	OCR0A = 125;
  e4:	9d e7       	ldi	r25, 0x7D	; 125
  e6:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1 << OCIE0A); // Enabling the overflow interrupt
  e8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	sei(); // Enable global interrupts
  ec:	78 94       	sei
  ee:	08 95       	ret

000000f0 <__vector_14>:
}

ISR(TIMER0_COMPA_vect) {
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	8f 93       	push	r24
  fc:	9f 93       	push	r25
  fe:	af 93       	push	r26
 100:	bf 93       	push	r27
	main_timer++;  // Main function timer, everything relies on this
 102:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 106:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 10a:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 10e:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 112:	01 96       	adiw	r24, 0x01	; 1
 114:	a1 1d       	adc	r26, r1
 116:	b1 1d       	adc	r27, r1
 118:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 11c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 120:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 124:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	PORTD ^= (1 << PD6); // Toggle Oscilloscope on PD6 (ONLY NEEDED FOR OSCILLIOSCOPE READING DEBUG PIN)
 128:	9b b1       	in	r25, 0x0b	; 11
 12a:	80 e4       	ldi	r24, 0x40	; 64
 12c:	89 27       	eor	r24, r25
 12e:	8b b9       	out	0x0b, r24	; 11
}
 130:	bf 91       	pop	r27
 132:	af 91       	pop	r26
 134:	9f 91       	pop	r25
 136:	8f 91       	pop	r24
 138:	0f 90       	pop	r0
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	0f 90       	pop	r0
 13e:	1f 90       	pop	r1
 140:	18 95       	reti

00000142 <main>:

int main(void) {
	// Setup
	DDRB |= (1 << PB0);
 142:	84 b1       	in	r24, 0x04	; 4
 144:	81 60       	ori	r24, 0x01	; 1
 146:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << grn) | (1 << yellow) | (1 << red) | (1 << ped_light);
 148:	8a b1       	in	r24, 0x0a	; 10
 14a:	8c 63       	ori	r24, 0x3C	; 60
 14c:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << reset_action);  // Button as input
 14e:	8a b1       	in	r24, 0x0a	; 10
 150:	8f 7b       	andi	r24, 0xBF	; 191
 152:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << reset_action);  // Enable pull-up
 154:	8b b1       	in	r24, 0x0b	; 11
 156:	80 64       	ori	r24, 0x40	; 64
 158:	8b b9       	out	0x0b, r24	; 11
	//TCCR0B = (1 << CS01) | (1 << CS00);
	//OCR0A = 125;
	//TIMSK0 |= (1 << OCIE0A);
	//sei();
	
	setupTimer0();
 15a:	0e 94 6e 00 	call	0xdc	; 0xdc <setupTimer0>

	uint32_t start_time = 0;
 15e:	c1 2c       	mov	r12, r1
 160:	d1 2c       	mov	r13, r1
 162:	76 01       	movw	r14, r12

	while (1) {
		if (!(PIND & (1 << reset_action))) {
 164:	4e 99       	sbic	0x09, 6	; 9
 166:	13 c0       	rjmp	.+38     	; 0x18e <main+0x4c>
			main_timer = 0;
 168:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 16c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 170:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 174:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
			start_time = 0;
			PORTD &= ~((1 << grn) | (1 << yellow) | (1 << ped_light));
 178:	8b b1       	in	r24, 0x0b	; 11
 17a:	87 7c       	andi	r24, 0xC7	; 199
 17c:	8b b9       	out	0x0b, r24	; 11
			PORTD |= (1 << red);
 17e:	8b b1       	in	r24, 0x0b	; 11
 180:	84 60       	ori	r24, 0x04	; 4
 182:	8b b9       	out	0x0b, r24	; 11
			while (!(PIND & (1 << reset_action)));
 184:	4e 9b       	sbis	0x09, 6	; 9
 186:	fe cf       	rjmp	.-4      	; 0x184 <main+0x42>
	uint32_t start_time = 0;

	while (1) {
		if (!(PIND & (1 << reset_action))) {
			main_timer = 0;
			start_time = 0;
 188:	c1 2c       	mov	r12, r1
 18a:	d1 2c       	mov	r13, r1
 18c:	76 01       	movw	r14, r12
			PORTD &= ~((1 << grn) | (1 << yellow) | (1 << ped_light));
			PORTD |= (1 << red);
			while (!(PIND & (1 << reset_action)));
		}

		uint32_t elapsed = main_timer - start_time;
 18e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 192:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 196:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 19a:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 19e:	bc 01       	movw	r22, r24
 1a0:	cd 01       	movw	r24, r26
 1a2:	6c 19       	sub	r22, r12
 1a4:	7d 09       	sbc	r23, r13
 1a6:	8e 09       	sbc	r24, r14
 1a8:	9f 09       	sbc	r25, r15

		if (elapsed < grn_time) {
 1aa:	60 37       	cpi	r22, 0x70	; 112
 1ac:	27 e1       	ldi	r18, 0x17	; 23
 1ae:	72 07       	cpc	r23, r18
 1b0:	81 05       	cpc	r24, r1
 1b2:	91 05       	cpc	r25, r1
 1b4:	50 f4       	brcc	.+20     	; 0x1ca <main+0x88>
			PORTD |= (1 << grn);
 1b6:	8b b1       	in	r24, 0x0b	; 11
 1b8:	80 61       	ori	r24, 0x10	; 16
 1ba:	8b b9       	out	0x0b, r24	; 11
			PORTD &= ~(1 << yellow) & ~(1 << red);
 1bc:	8b b1       	in	r24, 0x0b	; 11
 1be:	83 7f       	andi	r24, 0xF3	; 243
 1c0:	8b b9       	out	0x0b, r24	; 11
			PORTD |= (1 << ped_light);
 1c2:	8b b1       	in	r24, 0x0b	; 11
 1c4:	80 62       	ori	r24, 0x20	; 32
 1c6:	8b b9       	out	0x0b, r24	; 11
 1c8:	cd cf       	rjmp	.-102    	; 0x164 <main+0x22>
		}
		else if (elapsed < grn_time + yellow_time) {
 1ca:	68 32       	cpi	r22, 0x28	; 40
 1cc:	23 e2       	ldi	r18, 0x23	; 35
 1ce:	72 07       	cpc	r23, r18
 1d0:	81 05       	cpc	r24, r1
 1d2:	91 05       	cpc	r25, r1
 1d4:	c8 f4       	brcc	.+50     	; 0x208 <main+0xc6>
			PORTD |= (1 << yellow);
 1d6:	2b b1       	in	r18, 0x0b	; 11
 1d8:	28 60       	ori	r18, 0x08	; 8
 1da:	2b b9       	out	0x0b, r18	; 11
			PORTD &= ~(1 << grn) & ~(1 << red);
 1dc:	2b b1       	in	r18, 0x0b	; 11
 1de:	2b 7e       	andi	r18, 0xEB	; 235
 1e0:	2b b9       	out	0x0b, r18	; 11

			if ((elapsed % blink_delta) < (blink_delta / 2)) {
 1e2:	28 ee       	ldi	r18, 0xE8	; 232
 1e4:	33 e0       	ldi	r19, 0x03	; 3
 1e6:	40 e0       	ldi	r20, 0x00	; 0
 1e8:	50 e0       	ldi	r21, 0x00	; 0
 1ea:	0e 94 19 01 	call	0x232	; 0x232 <__udivmodsi4>
 1ee:	64 3f       	cpi	r22, 0xF4	; 244
 1f0:	71 40       	sbci	r23, 0x01	; 1
 1f2:	81 05       	cpc	r24, r1
 1f4:	91 05       	cpc	r25, r1
 1f6:	20 f4       	brcc	.+8      	; 0x200 <main+0xbe>
				PORTD |= (1 << ped_light);
 1f8:	8b b1       	in	r24, 0x0b	; 11
 1fa:	80 62       	ori	r24, 0x20	; 32
 1fc:	8b b9       	out	0x0b, r24	; 11
 1fe:	b2 cf       	rjmp	.-156    	; 0x164 <main+0x22>
				} else {
				PORTD &= ~(1 << ped_light);
 200:	8b b1       	in	r24, 0x0b	; 11
 202:	8f 7d       	andi	r24, 0xDF	; 223
 204:	8b b9       	out	0x0b, r24	; 11
 206:	ae cf       	rjmp	.-164    	; 0x164 <main+0x22>
			}
		}
		else if (elapsed < grn_time + yellow_time + red_time) {
 208:	68 36       	cpi	r22, 0x68	; 104
 20a:	72 44       	sbci	r23, 0x42	; 66
 20c:	81 05       	cpc	r24, r1
 20e:	91 05       	cpc	r25, r1
 210:	38 f4       	brcc	.+14     	; 0x220 <main+0xde>
			PORTD |= (1 << red);
 212:	8b b1       	in	r24, 0x0b	; 11
 214:	84 60       	ori	r24, 0x04	; 4
 216:	8b b9       	out	0x0b, r24	; 11
			PORTD &= ~(1 << grn) & ~(1 << yellow) & ~(1 << ped_light);
 218:	8b b1       	in	r24, 0x0b	; 11
 21a:	87 7c       	andi	r24, 0xC7	; 199
 21c:	8b b9       	out	0x0b, r24	; 11
 21e:	a2 cf       	rjmp	.-188    	; 0x164 <main+0x22>
		}
		else {
			start_time = main_timer;
 220:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 224:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 228:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 22c:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 230:	99 cf       	rjmp	.-206    	; 0x164 <main+0x22>

00000232 <__udivmodsi4>:
 232:	a1 e2       	ldi	r26, 0x21	; 33
 234:	1a 2e       	mov	r1, r26
 236:	aa 1b       	sub	r26, r26
 238:	bb 1b       	sub	r27, r27
 23a:	fd 01       	movw	r30, r26
 23c:	0d c0       	rjmp	.+26     	; 0x258 <__udivmodsi4_ep>

0000023e <__udivmodsi4_loop>:
 23e:	aa 1f       	adc	r26, r26
 240:	bb 1f       	adc	r27, r27
 242:	ee 1f       	adc	r30, r30
 244:	ff 1f       	adc	r31, r31
 246:	a2 17       	cp	r26, r18
 248:	b3 07       	cpc	r27, r19
 24a:	e4 07       	cpc	r30, r20
 24c:	f5 07       	cpc	r31, r21
 24e:	20 f0       	brcs	.+8      	; 0x258 <__udivmodsi4_ep>
 250:	a2 1b       	sub	r26, r18
 252:	b3 0b       	sbc	r27, r19
 254:	e4 0b       	sbc	r30, r20
 256:	f5 0b       	sbc	r31, r21

00000258 <__udivmodsi4_ep>:
 258:	66 1f       	adc	r22, r22
 25a:	77 1f       	adc	r23, r23
 25c:	88 1f       	adc	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	1a 94       	dec	r1
 262:	69 f7       	brne	.-38     	; 0x23e <__udivmodsi4_loop>
 264:	60 95       	com	r22
 266:	70 95       	com	r23
 268:	80 95       	com	r24
 26a:	90 95       	com	r25
 26c:	9b 01       	movw	r18, r22
 26e:	ac 01       	movw	r20, r24
 270:	bd 01       	movw	r22, r26
 272:	cf 01       	movw	r24, r30
 274:	08 95       	ret

00000276 <_exit>:
 276:	f8 94       	cli

00000278 <__stop_program>:
 278:	ff cf       	rjmp	.-2      	; 0x278 <__stop_program>
